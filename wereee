----------------------------------------------------------------------
-- NICER EMBED + AUTO RESET
----------------------------------------------------------------------

local function buildEggEmbed()
    local eggInventory = getEggInventory()
    local fields = {}

    for eggType, info in pairs(eggInventory) do
        local value = "Total: **" .. tostring(info.total) .. "**"
        
        -- Add mutations cleanly
        local muts = {}
        for mut, count in pairs(info.mutations) do
            table.insert(muts, mut .. " × " .. count)
        end
        if #muts > 0 then
            value = value .. "\n" .. table.concat(muts, " • ")
        end

        table.insert(fields, {
            name = "🥚 " .. eggType,
            value = value,
            inline = false
        })
    end

    if #fields == 0 then
        table.insert(fields, {
            name = "No Eggs Yet",
            value = "Go fish some 🐟",
            inline = false
        })
    end

    return {
        content = nil,
        embeds = {{
            title = "🎣 Live Egg Tracker",
            description = "Updated every 10s • AFK Mode",
            color = 3447003,
            fields = fields,
            footer = { text = "AFK Fishing • CooperHub" },
            timestamp = DateTime.now():ToIsoDate()
        }}
    }
end

local function sendOrUpdateEggs()
    if webhookUrl == "" then return end
    local payload = HttpService:JSONEncode(buildEggEmbed())

    -- If we don’t have a message yet, always POST
    if not webhookMessageId or webhookMessageId == "" then
        local success, res = pcall(function()
            return http_request({
                Url = webhookUrl,
                Method = "POST",
                Headers = { ["Content-Type"] = "application/json" },
                Body = payload
            })
        end)
        if success and res and res.Body then
            local ok, data = pcall(function()
                return HttpService:JSONDecode(res.Body)
            end)
            if ok and data and data.id then
                webhookMessageId = data.id
            end
        end
    else
        -- Try updating existing message
        local success, res = pcall(function()
            return http_request({
                Url = webhookUrl .. "/messages/" .. webhookMessageId,
                Method = "PATCH",
                Headers = { ["Content-Type"] = "application/json" },
                Body = payload
            })
        end)

        -- If failed (e.g. old webhook deleted) -> reset & create new
        if not success or (res and res.StatusCode ~= 200) then
            warn("Webhook update failed, resetting...")
            webhookMessageId = nil
            sendOrUpdateEggs() -- retry immediately
        end
    end
end
