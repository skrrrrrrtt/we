--[[ 
    CooperHub | Auto Fishing + Egg Tracker
    AFK Fishing with live Discord webhook updates
    Webhook Config added to Rayfield UI
]]

-- Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local Player = Players.LocalPlayer

-- Character refs
local Character = Player.Character or Player.CharacterAdded:Wait()
local HRP = Character:WaitForChild("HumanoidRootPart")
local Humanoid = Character:WaitForChild("Humanoid")

-- UI
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

----------------------------------------------------------------------
-- STATE
----------------------------------------------------------------------

local active = false
local selectedBait = "FishingBait1"
local castThread
local lastCastPos, lastCastPosAt = nil, 0
local teleportDelay = 100

-- Egg tracking
local webhookUrl = ""
local webhookMessageId = nil

----------------------------------------------------------------------
-- EGG INVENTORY
----------------------------------------------------------------------

local function getEggInventory()
    local eggs = {}

    local playerGui = Player:FindFirstChild("PlayerGui")
    if not playerGui then return eggs end

    local data = playerGui:FindFirstChild("Data")
    if not data then return eggs end

    local eggContainer = data:FindFirstChild("Egg")
    if not eggContainer then return eggs end

    for _, child in ipairs(eggContainer:GetChildren()) do
        if child:IsA("Configuration") then
            local dAttr = child:GetAttribute("D")
            local eggType = child:GetAttribute("T")
            local mutation = child:GetAttribute("M")

            -- Only count eggs WITHOUT "D" (unhatched)
            if not dAttr and eggType then
                if mutation == "Dino" then
                    mutation = "Jurassic"
                end

                if not eggs[eggType] then
                    eggs[eggType] = {
                        total = 0,
                        mutations = {}
                    }
                end

                eggs[eggType].total += 1

                if mutation then
                    eggs[eggType].mutations[mutation] = (eggs[eggType].mutations[mutation] or 0) + 1
                end
            end
        end
    end

    return eggs
end

----------------------------------------------------------------------
-- WEBHOOK HELPERS
----------------------------------------------------------------------

local function buildEggEmbed()
    local lines = {"```diff"}
    local eggInventory = getEggInventory()

    for eggType, info in pairs(eggInventory) do
        local line = "ðŸ¥š " .. eggType .. " Ã— " .. tostring(info.total)

        -- Add mutations if any
        local muts = {}
        for mut, count in pairs(info.mutations) do
            table.insert(muts, mut .. " Ã— " .. count)
        end
        if #muts > 0 then
            line = line .. " (" .. table.concat(muts, ", ") .. ")"
        end

        table.insert(lines, line)
    end

    if #lines == 1 then
        table.insert(lines, "No eggs yet")
    end
    table.insert(lines, "```")

    return {
        content = nil,
        embeds = {{
            title = "ðŸŽ£ Live Egg Tracker",
            description = table.concat(lines, "\n"),
            color = 3447003,
            footer = { text = "AFK Fishing â€¢ CooperHub" }
        }}
    }
end

local function sendOrUpdateEggs()
    if webhookUrl == "" then return end
    local payload = HttpService:JSONEncode(buildEggEmbed())

    if not webhookMessageId or webhookMessageId == "" then
        -- POST new
        local success, res = pcall(function()
            return http_request({
                Url = webhookUrl,
                Method = "POST",
                Headers = { ["Content-Type"] = "application/json" },
                Body = payload
            })
        end)
        if success and res and res.Body then
            local data = HttpService:JSONDecode(res.Body)
            webhookMessageId = data.id
        end
    else
        -- PATCH existing
        local success, res = pcall(function()
            return http_request({
                Url = webhookUrl .. "/messages/" .. webhookMessageId,
                Method = "PATCH",
                Headers = { ["Content-Type"] = "application/json" },
                Body = payload
            })
        end)
        if not success then
            warn("Webhook update failed:", res)
        end
    end
end

-- Clear old webhook & reset
local function resetWebhook()
    webhookMessageId = nil
    sendOrUpdateEggs() -- will create new one on next call
end

-- Auto refresh egg tracker every 10s
task.spawn(function()
    while true do
        sendOrUpdateEggs()
        task.wait(10)
    end
end)

----------------------------------------------------------------------
-- FISHING CORE
----------------------------------------------------------------------

local function readHoldUID()
    local attrVal = Player:GetAttribute("HoldUID")
    if attrVal and tostring(attrVal) ~= "" then return tostring(attrVal) end
    local vobj = Player:FindFirstChild("HoldUID")
    return vobj and vobj.Value or nil
end

local function ensureFishRobFocus()
    if readHoldUID() == "FishRob" then return true end
    local ok = pcall(function()
        ReplicatedStorage:WaitForChild("Remote"):WaitForChild("CharacterRE"):FireServer("Focus", "FishRob")
    end)
    return ok == true
end

local function getCachedCastPos()
    local now = tick()
    if (not lastCastPos) or (now - lastCastPosAt >= 5) then
        lastCastPos = HRP.Position + Vector3.new(0, 10, 0)
        lastCastPosAt = now
    end
    return lastCastPos
end

local function castOnce()
    if not ensureFishRobFocus() then return end
    pcall(function()
        ReplicatedStorage:WaitForChild("Remote"):WaitForChild("FishingRE"):FireServer("Start")
    end)
    local pos = getCachedCastPos()
    pcall(function()
        ReplicatedStorage:WaitForChild("Remote"):WaitForChild("FishingRE"):FireServer("Throw", {
            Bait = selectedBait,
            Pos = pos,
            NoMove = true
        })
    end)
    pcall(function()
        ReplicatedStorage:WaitForChild("Remote"):WaitForChild("FishingRE"):FireServer("POUT", {
            SUC = 1,
            NoMove = true
        })
    end)
end

local function loopCast()
    while active do
        castOnce()
        RunService.Heartbeat:Wait()
    end
end

local function setEnabled(state)
    if state then
        if active then return end
        active = true
        castThread = task.spawn(loopCast)
    else
        active = false
        if castThread then task.cancel(castThread) castThread = nil end
    end
end

local function setBait(baitId)
    if baitId then
        selectedBait = baitId
    end
end

----------------------------------------------------------------------
-- RAYFIELD UI
----------------------------------------------------------------------

local Window = Rayfield:CreateWindow({
    Name = "CooperHub | AFK Fishing",
    LoadingTitle = "AutoFish",
    LoadingSubtitle = "by CooperHub",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "CooperHubFishing",
        FileName = "FishConfig"
    },
    KeySystem = false
})

local FishTab = Window:CreateTab("Fishing")

FishTab:CreateToggle({
    Name = "Auto Fish",
    CurrentValue = false,
    Callback = function(val)
        setEnabled(val)
    end
})

FishTab:CreateDropdown({
    Name = "Select Bait",
    Options = {"Bait 1","Bait 2","Bait 3"},
    CurrentOption = "Bait 1",
    MultipleOptions = false,
    Callback = function(val)
        if val == "Bait 1" then setBait("FishingBait1") end
        if val == "Bait 2" then setBait("FishingBait2") end
        if val == "Bait 3" then setBait("FishingBait3") end
    end
})

FishTab:CreateSlider({
    Name = "Teleport Delay (ms)",
    Range = {0, 1000},
    Increment = 50,
    CurrentValue = 100,
    Callback = function(val)
        teleportDelay = val
    end
})

-- Webhook tab
local WebhookTab = Window:CreateTab("Webhook")

WebhookTab:CreateInput({
    Name = "Webhook URL",
    PlaceholderText = "Paste Discord Webhook URL",
    RemoveTextAfterFocus = false,
    Callback = function(val)
        webhookUrl = val
        print("Webhook URL set:", webhookUrl)
    end
})

WebhookTab:CreateButton({
    Name = "Reset Webhook (new message)",
    Callback = function()
        resetWebhook()
        print("ðŸ”„ Old webhook cleared. New one will be created on next update.")
    end
})

local MiscTab = Window:CreateTab("Misc")

MiscTab:CreateButton({
    Name = "Terminate Script",
    Callback = function()
        Rayfield:Destroy()
        script:Destroy()
    end
})
